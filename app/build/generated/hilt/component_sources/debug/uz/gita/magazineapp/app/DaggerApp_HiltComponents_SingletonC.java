// Generated by Dagger (https://dagger.dev).
package uz.gita.magazineapp.app;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import cafe.adriel.voyager.core.model.ScreenModel;
import cafe.adriel.voyager.hilt.ScreenModelFactory;
import cafe.adriel.voyager.hilt.VoyagerHiltViewModelFactories;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import uz.gita.magazineapp.MainActivity;
import uz.gita.magazineapp.MainActivity_MembersInjector;
import uz.gita.magazineapp.domain.repositories.authrepository.AuthRepository;
import uz.gita.magazineapp.domain.repositories.authrepository.impl.AuthRepositoryImpl;
import uz.gita.magazineapp.domain.repositories.datarepository.DataRepository;
import uz.gita.magazineapp.domain.repositories.datarepository.impl.DataRepositoryImpl;
import uz.gita.magazineapp.presentation.screens.accountscreen.AccountScreenDirectionImpl;
import uz.gita.magazineapp.presentation.screens.accountscreen.AccountViewScreenModel;
import uz.gita.magazineapp.presentation.screens.accountscreen.AccountViewScreenModel_HiltModules_KeyModule_ProvideFactory;
import uz.gita.magazineapp.presentation.screens.addcategories.AddCategoryDirectionIMpl;
import uz.gita.magazineapp.presentation.screens.addcategories.AddCategoryViewModel;
import uz.gita.magazineapp.presentation.screens.addcategories.AddCategoryViewModel_HiltModules_KeyModule_ProvideFactory;
import uz.gita.magazineapp.presentation.screens.addproduct.AddScreenDirectionImpl;
import uz.gita.magazineapp.presentation.screens.addproduct.AddScreenViewModel;
import uz.gita.magazineapp.presentation.screens.addproduct.AddScreenViewModel_Factory;
import uz.gita.magazineapp.presentation.screens.addproduct.AddScreenViewModel_HiltModules_KeyModule_ProvideFactory;
import uz.gita.magazineapp.presentation.screens.addproduct.AddScreenViewModel_MembersInjector;
import uz.gita.magazineapp.presentation.screens.onboarding.OnBoardingDirectionIMpl;
import uz.gita.magazineapp.presentation.screens.onboarding.OnBoardingViewModel;
import uz.gita.magazineapp.presentation.screens.onboarding.OnBoardingViewModel_HiltModules_KeyModule_ProvideFactory;
import uz.gita.magazineapp.presentation.screens.shopscreen.ShopDirectionImpl;
import uz.gita.magazineapp.presentation.screens.shopscreen.ShopScreenViewModel;
import uz.gita.magazineapp.presentation.screens.shopscreen.ShopScreenViewModel_HiltModules_KeyModule_ProvideFactory;
import uz.gita.magazineapp.presentation.screens.shopscreen.page.homepage.HomePageDirectionImpl;
import uz.gita.magazineapp.presentation.screens.shopscreen.page.homepage.HomePageViewModel;
import uz.gita.magazineapp.presentation.screens.shopscreen.page.homepage.HomePageViewModel_HiltModules_KeyModule_ProvideFactory;
import uz.gita.magazineapp.presentation.screens.shopscreen.page.shoppingpage.ShoppingPageDirectionImpl;
import uz.gita.magazineapp.presentation.screens.shopscreen.page.shoppingpage.ShoppingPageViewModel;
import uz.gita.magazineapp.presentation.screens.shopscreen.page.shoppingpage.ShoppingPageViewModel_HiltModules_KeyModule_ProvideFactory;
import uz.gita.magazineapp.presentation.screens.signin.SignInDirectionImpl;
import uz.gita.magazineapp.presentation.screens.signin.SignInScreenViewModel;
import uz.gita.magazineapp.presentation.screens.signin.SignInScreenViewModel_HiltModules_KeyModule_ProvideFactory;
import uz.gita.magazineapp.presentation.screens.signup.SignUpDirectionImpl;
import uz.gita.magazineapp.presentation.screens.signup.SignUpScreenViewModel;
import uz.gita.magazineapp.presentation.screens.signup.SignUpScreenViewModel_Factory;
import uz.gita.magazineapp.presentation.screens.signup.SignUpScreenViewModel_HiltModules_KeyModule_ProvideFactory;
import uz.gita.magazineapp.presentation.screens.signup.SignUpScreenViewModel_MembersInjector;
import uz.gita.magazineapp.util.navigation.NavigationDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApp_HiltComponents_SingletonC {
  private DaggerApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public App_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public App_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public App_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends App_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends App_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends App_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends App_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public VoyagerHiltViewModelFactories.InternalViewModelFactory internalViewModelFactory() {
      return new VoyagerHiltViewModelFactories.InternalViewModelFactory(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Map<Class<? extends ScreenModelFactory>, Provider<ScreenModelFactory>> screenModelFactories(
        ) {
      return ImmutableMap.<Class<? extends ScreenModelFactory>, Provider<ScreenModelFactory>>of();
    }

    @Override
    public Map<Class<? extends ScreenModel>, Provider<ScreenModel>> screenModels() {
      return ImmutableMap.<Class<? extends ScreenModel>, Provider<ScreenModel>>of();
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of(AccountViewScreenModel_HiltModules_KeyModule_ProvideFactory.provide(), AddCategoryViewModel_HiltModules_KeyModule_ProvideFactory.provide(), AddScreenViewModel_HiltModules_KeyModule_ProvideFactory.provide(), HomePageViewModel_HiltModules_KeyModule_ProvideFactory.provide(), OnBoardingViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ShopScreenViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ShoppingPageViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SignInScreenViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SignUpScreenViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectMainActivity(MainActivity arg0) {
      injectMainActivity2(arg0);
    }

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectNavigationHandler(instance, singletonCImpl.navigationDispatcherProvider.get());
      MainActivity_MembersInjector.injectAuthRepository(instance, singletonCImpl.authRepositoryBindProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AccountViewScreenModel> accountViewScreenModelProvider;

    private Provider<AddCategoryViewModel> addCategoryViewModelProvider;

    private Provider<AddScreenViewModel> addScreenViewModelProvider;

    private Provider<HomePageViewModel> homePageViewModelProvider;

    private Provider<OnBoardingViewModel> onBoardingViewModelProvider;

    private Provider<ShopScreenViewModel> shopScreenViewModelProvider;

    private Provider<ShoppingPageViewModel> shoppingPageViewModelProvider;

    private Provider<SignInScreenViewModel> signInScreenViewModelProvider;

    private Provider<SignUpScreenViewModel> signUpScreenViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.accountViewScreenModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.addCategoryViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.addScreenViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.homePageViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.onBoardingViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.shopScreenViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.shoppingPageViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.signInScreenViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.signUpScreenViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(9).put("uz.gita.magazineapp.presentation.screens.accountscreen.AccountViewScreenModel", ((Provider) accountViewScreenModelProvider)).put("uz.gita.magazineapp.presentation.screens.addcategories.AddCategoryViewModel", ((Provider) addCategoryViewModelProvider)).put("uz.gita.magazineapp.presentation.screens.addproduct.AddScreenViewModel", ((Provider) addScreenViewModelProvider)).put("uz.gita.magazineapp.presentation.screens.shopscreen.page.homepage.HomePageViewModel", ((Provider) homePageViewModelProvider)).put("uz.gita.magazineapp.presentation.screens.onboarding.OnBoardingViewModel", ((Provider) onBoardingViewModelProvider)).put("uz.gita.magazineapp.presentation.screens.shopscreen.ShopScreenViewModel", ((Provider) shopScreenViewModelProvider)).put("uz.gita.magazineapp.presentation.screens.shopscreen.page.shoppingpage.ShoppingPageViewModel", ((Provider) shoppingPageViewModelProvider)).put("uz.gita.magazineapp.presentation.screens.signin.SignInScreenViewModel", ((Provider) signInScreenViewModelProvider)).put("uz.gita.magazineapp.presentation.screens.signup.SignUpScreenViewModel", ((Provider) signUpScreenViewModelProvider)).build();
    }

    @CanIgnoreReturnValue
    private AddScreenViewModel injectAddScreenViewModel(AddScreenViewModel instance) {
      AddScreenViewModel_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));
      return instance;
    }

    @CanIgnoreReturnValue
    private SignUpScreenViewModel injectSignUpScreenViewModel(SignUpScreenViewModel instance) {
      SignUpScreenViewModel_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // uz.gita.magazineapp.presentation.screens.accountscreen.AccountViewScreenModel 
          return (T) new AccountViewScreenModel(singletonCImpl.accountScreenDirectionImpl());

          case 1: // uz.gita.magazineapp.presentation.screens.addcategories.AddCategoryViewModel 
          return (T) new AddCategoryViewModel(singletonCImpl.dataRepositoryBindProvider.get(), singletonCImpl.addCategoryDirectionIMpl());

          case 2: // uz.gita.magazineapp.presentation.screens.addproduct.AddScreenViewModel 
          return (T) viewModelCImpl.injectAddScreenViewModel(AddScreenViewModel_Factory.newInstance(singletonCImpl.dataRepositoryBindProvider.get(), singletonCImpl.addScreenDirectionImpl()));

          case 3: // uz.gita.magazineapp.presentation.screens.shopscreen.page.homepage.HomePageViewModel 
          return (T) new HomePageViewModel(singletonCImpl.dataRepositoryBindProvider.get(), singletonCImpl.homePageDirectionImpl());

          case 4: // uz.gita.magazineapp.presentation.screens.onboarding.OnBoardingViewModel 
          return (T) new OnBoardingViewModel(singletonCImpl.onBoardingDirectionIMpl());

          case 5: // uz.gita.magazineapp.presentation.screens.shopscreen.ShopScreenViewModel 
          return (T) new ShopScreenViewModel(singletonCImpl.dataRepositoryBindProvider.get(), singletonCImpl.shopDirectionImpl());

          case 6: // uz.gita.magazineapp.presentation.screens.shopscreen.page.shoppingpage.ShoppingPageViewModel 
          return (T) new ShoppingPageViewModel(singletonCImpl.shoppingPageDirectionImpl(), singletonCImpl.dataRepositoryBindProvider.get());

          case 7: // uz.gita.magazineapp.presentation.screens.signin.SignInScreenViewModel 
          return (T) new SignInScreenViewModel(singletonCImpl.signInDirectionImpl(), singletonCImpl.authRepositoryBindProvider.get());

          case 8: // uz.gita.magazineapp.presentation.screens.signup.SignUpScreenViewModel 
          return (T) viewModelCImpl.injectSignUpScreenViewModel(SignUpScreenViewModel_Factory.newInstance(singletonCImpl.authRepositoryBindProvider.get(), singletonCImpl.signUpDirectionImpl()));

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends App_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<NavigationDispatcher> navigationDispatcherProvider;

    private Provider<AuthRepositoryImpl> authRepositoryImplProvider;

    private Provider<AuthRepository> authRepositoryBindProvider;

    private Provider<DataRepositoryImpl> dataRepositoryImplProvider;

    private Provider<DataRepository> dataRepositoryBindProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    private AccountScreenDirectionImpl accountScreenDirectionImpl() {
      return new AccountScreenDirectionImpl(navigationDispatcherProvider.get());
    }

    private AddCategoryDirectionIMpl addCategoryDirectionIMpl() {
      return new AddCategoryDirectionIMpl(navigationDispatcherProvider.get());
    }

    private AddScreenDirectionImpl addScreenDirectionImpl() {
      return new AddScreenDirectionImpl(navigationDispatcherProvider.get());
    }

    private HomePageDirectionImpl homePageDirectionImpl() {
      return new HomePageDirectionImpl(navigationDispatcherProvider.get());
    }

    private OnBoardingDirectionIMpl onBoardingDirectionIMpl() {
      return new OnBoardingDirectionIMpl(navigationDispatcherProvider.get());
    }

    private ShopDirectionImpl shopDirectionImpl() {
      return new ShopDirectionImpl(navigationDispatcherProvider.get());
    }

    private ShoppingPageDirectionImpl shoppingPageDirectionImpl() {
      return new ShoppingPageDirectionImpl(navigationDispatcherProvider.get());
    }

    private SignInDirectionImpl signInDirectionImpl() {
      return new SignInDirectionImpl(navigationDispatcherProvider.get());
    }

    private SignUpDirectionImpl signUpDirectionImpl() {
      return new SignUpDirectionImpl(navigationDispatcherProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.navigationDispatcherProvider = DoubleCheck.provider(new SwitchingProvider<NavigationDispatcher>(singletonCImpl, 0));
      this.authRepositoryImplProvider = new SwitchingProvider<>(singletonCImpl, 1);
      this.authRepositoryBindProvider = DoubleCheck.provider((Provider) authRepositoryImplProvider);
      this.dataRepositoryImplProvider = new SwitchingProvider<>(singletonCImpl, 2);
      this.dataRepositoryBindProvider = DoubleCheck.provider((Provider) dataRepositoryImplProvider);
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return ImmutableSet.<Boolean>of();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    @Override
    public void injectApp(App app) {
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // uz.gita.magazineapp.util.navigation.NavigationDispatcher 
          return (T) new NavigationDispatcher();

          case 1: // uz.gita.magazineapp.domain.repositories.authrepository.impl.AuthRepositoryImpl 
          return (T) new AuthRepositoryImpl();

          case 2: // uz.gita.magazineapp.domain.repositories.datarepository.impl.DataRepositoryImpl 
          return (T) new DataRepositoryImpl();

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
