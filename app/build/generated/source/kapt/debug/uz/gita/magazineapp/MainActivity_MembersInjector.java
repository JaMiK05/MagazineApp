// Generated by Dagger (https://dagger.dev).
package uz.gita.magazineapp;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;
import uz.gita.magazineapp.domain.repositories.authrepository.AuthRepository;
import uz.gita.magazineapp.util.navigation.NavigationHandler;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<NavigationHandler> navigationHandlerProvider;

  private final Provider<AuthRepository> authRepositoryProvider;

  public MainActivity_MembersInjector(Provider<NavigationHandler> navigationHandlerProvider,
      Provider<AuthRepository> authRepositoryProvider) {
    this.navigationHandlerProvider = navigationHandlerProvider;
    this.authRepositoryProvider = authRepositoryProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<NavigationHandler> navigationHandlerProvider,
      Provider<AuthRepository> authRepositoryProvider) {
    return new MainActivity_MembersInjector(navigationHandlerProvider, authRepositoryProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    injectNavigationHandler(instance, navigationHandlerProvider.get());
    injectAuthRepository(instance, authRepositoryProvider.get());
  }

  @InjectedFieldSignature("uz.gita.magazineapp.MainActivity.navigationHandler")
  public static void injectNavigationHandler(MainActivity instance,
      NavigationHandler navigationHandler) {
    instance.navigationHandler = navigationHandler;
  }

  @InjectedFieldSignature("uz.gita.magazineapp.MainActivity.authRepository")
  public static void injectAuthRepository(MainActivity instance, AuthRepository authRepository) {
    instance.authRepository = authRepository;
  }
}
