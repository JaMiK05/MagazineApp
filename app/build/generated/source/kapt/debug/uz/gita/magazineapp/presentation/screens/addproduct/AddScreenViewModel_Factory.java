// Generated by Dagger (https://dagger.dev).
package uz.gita.magazineapp.presentation.screens.addproduct;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import uz.gita.magazineapp.domain.repositories.datarepository.DataRepository;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddScreenViewModel_Factory implements Factory<AddScreenViewModel> {
  private final Provider<DataRepository> repositoryProvider;

  private final Provider<AddScreenDirection> directionProvider;

  private final Provider<Context> contextProvider;

  public AddScreenViewModel_Factory(Provider<DataRepository> repositoryProvider,
      Provider<AddScreenDirection> directionProvider, Provider<Context> contextProvider) {
    this.repositoryProvider = repositoryProvider;
    this.directionProvider = directionProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public AddScreenViewModel get() {
    AddScreenViewModel instance = newInstance(repositoryProvider.get(), directionProvider.get());
    AddScreenViewModel_MembersInjector.injectContext(instance, contextProvider.get());
    return instance;
  }

  public static AddScreenViewModel_Factory create(Provider<DataRepository> repositoryProvider,
      Provider<AddScreenDirection> directionProvider, Provider<Context> contextProvider) {
    return new AddScreenViewModel_Factory(repositoryProvider, directionProvider, contextProvider);
  }

  public static AddScreenViewModel newInstance(DataRepository repository,
      AddScreenDirection direction) {
    return new AddScreenViewModel(repository, direction);
  }
}
