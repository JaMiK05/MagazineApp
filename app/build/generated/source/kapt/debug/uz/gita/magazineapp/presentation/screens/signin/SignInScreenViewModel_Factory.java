// Generated by Dagger (https://dagger.dev).
package uz.gita.magazineapp.presentation.screens.signin;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import uz.gita.magazineapp.domain.repositories.authrepository.AuthRepository;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SignInScreenViewModel_Factory implements Factory<SignInScreenViewModel> {
  private final Provider<SignInDirection> directionProvider;

  private final Provider<AuthRepository> authRepositoryProvider;

  public SignInScreenViewModel_Factory(Provider<SignInDirection> directionProvider,
      Provider<AuthRepository> authRepositoryProvider) {
    this.directionProvider = directionProvider;
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public SignInScreenViewModel get() {
    return newInstance(directionProvider.get(), authRepositoryProvider.get());
  }

  public static SignInScreenViewModel_Factory create(Provider<SignInDirection> directionProvider,
      Provider<AuthRepository> authRepositoryProvider) {
    return new SignInScreenViewModel_Factory(directionProvider, authRepositoryProvider);
  }

  public static SignInScreenViewModel newInstance(SignInDirection direction,
      AuthRepository authRepository) {
    return new SignInScreenViewModel(direction, authRepository);
  }
}
