// Generated by Dagger (https://dagger.dev).
package uz.gita.magazineapp.presentation.screens.signup;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import uz.gita.magazineapp.domain.repositories.authrepository.AuthRepository;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SignUpScreenViewModel_Factory implements Factory<SignUpScreenViewModel> {
  private final Provider<AuthRepository> authRepositoryProvider;

  private final Provider<SignUpDirection> directionProvider;

  private final Provider<Context> contextProvider;

  public SignUpScreenViewModel_Factory(Provider<AuthRepository> authRepositoryProvider,
      Provider<SignUpDirection> directionProvider, Provider<Context> contextProvider) {
    this.authRepositoryProvider = authRepositoryProvider;
    this.directionProvider = directionProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public SignUpScreenViewModel get() {
    SignUpScreenViewModel instance = newInstance(authRepositoryProvider.get(), directionProvider.get());
    SignUpScreenViewModel_MembersInjector.injectContext(instance, contextProvider.get());
    return instance;
  }

  public static SignUpScreenViewModel_Factory create(
      Provider<AuthRepository> authRepositoryProvider, Provider<SignUpDirection> directionProvider,
      Provider<Context> contextProvider) {
    return new SignUpScreenViewModel_Factory(authRepositoryProvider, directionProvider, contextProvider);
  }

  public static SignUpScreenViewModel newInstance(AuthRepository authRepository,
      SignUpDirection direction) {
    return new SignUpScreenViewModel(authRepository, direction);
  }
}
